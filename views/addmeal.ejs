<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title> <!-- כותרת דינמית -->
    <style>
        body {
            font-family: Arial, sans-serif;
            background-image: url('/images/SIGN_IN_&SIGN_UP.jpg');
            background-size: cover;
            background-position: center;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        .container {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            max-width: 400px;
            width: 100%;
            text-align: center;
        }
        #drop-area {
            border: 2px dashed #d4b862;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 8px;
            cursor: pointer;
        }
        #urlInput {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        button {
            width: 100%;
            padding: 10px;
            background-color: #d4b862;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        button:hover {
            background-color: #bfa456;
        }
        #message, #result, #sugarInfo, #holidayMessage {
            margin-top: 20px;
            font-size: 16px;
            color: #333;
        }
        #result, #sugarInfo {
            background-color: #f8f9fa;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            text-align: left;
            max-height: 200px;
            overflow-y: auto;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2><%= title %></h2> <!-- כותרת דינמית -->
        <div id="drop-area">Drag & Drop an Image Here or Click to Select</div>
        <input type="file" id="fileInput" style="display: none;">
        <input type="text" id="urlInput" placeholder="Or enter an image URL" required>
        <button id="uploadBtn">Upload</button>

        <!-- מידע תזונתי -->
        <div id="sugarInfo"></div>
        
        <!-- הודעות שבת/חג -->
        <div id="holidayMessage"><%= holidayMessage || '' %></div>
        
        <!-- תוצאות דינמיות -->
        <div id="result"><%= tags && tags.length > 0 ? tags.map(tag => `${tag.tag.en} - Confidence: ${tag.confidence.toFixed(2)}%`).join('<br>') : '' %></div>

        <!-- הודעות כלליות -->
        <div id="message"><%= message || '' %></div>
    </div>

    <script>
        const dropArea = document.getElementById('drop-area');
        const fileInput = document.getElementById('fileInput');
        const urlInput = document.getElementById('urlInput');
        const uploadBtn = document.getElementById('uploadBtn');
        const messageDiv = document.getElementById('message');
        const resultDiv = document.getElementById('result');
        const sugarInfoDiv = document.getElementById('sugarInfo');

        dropArea.addEventListener('click', () => fileInput.click());

        dropArea.addEventListener('dragover', (event) => {
            event.preventDefault();
            dropArea.style.borderColor = '#bfa456';
        });

        dropArea.addEventListener('dragleave', () => {
            dropArea.style.borderColor = '#d4b862';
        });

        dropArea.addEventListener('drop', (event) => {
            event.preventDefault();
            dropArea.style.borderColor = '#d4b862';
            const file = event.dataTransfer.files[0];
            if (file) {
                handleFileUpload(file);
            }
        });

        fileInput.addEventListener('change', () => {
            const file = fileInput.files[0];
            if (file) {
                handleFileUpload(file);
            }
        });

        uploadBtn.addEventListener('click', () => {
            const imageUrl = urlInput.value;
            if (imageUrl) {
                uploadImageUrl(imageUrl);
            } else {
                messageDiv.innerText = 'Please provide an image URL or drag a file.';
            }
        });

        async function handleFileUpload(file) {
        const formData = new FormData();
        formData.append('image', file);

        try {
            const response = await fetch('https://api.imagga.com/v2/tags', {
                method: 'POST',
                headers: {
                    'Authorization': 'Basic ' + btoa('acc_ccbed1c8a76b278:eefa194953f9607f67b62355e4a3229b')
                },
                body: formData
            });

            const data = await response.json();

            console.log('API Response:', data);

            if (data.result && data.result.tags && data.result.tags.length > 0) {
                displayTags(data.result.tags);
                messageDiv.innerText = 'Image analyzed successfully';
                const firstTag = data.result.tags[0].tag.en;
                getNutritionalInfo(firstTag);
            } else {
                messageDiv.innerText = 'No tags found for this image';
                resultDiv.innerText = '';
            }
        } catch (error) {
            console.error('Error uploading local file:', error);
        }
    }

        async function uploadImageUrl(url) {
            try {
                const response = await fetch('https://api.imagga.com/v2/tags?image_url=' + encodeURIComponent(url), {
                    headers: {
                        'Authorization': 'Basic ' + btoa('acc_ccbed1c8a76b278:eefa194953f9607f67b62355e4a3229b')
                    }
                });

                if (!response.ok) {
                    throw new Error(`API error: ${response.status} - ${response.statusText}`);
                }

                const data = await response.json();

                if (data.result && data.result.tags && data.result.tags.length > 0) {
                    displayTags(data.result.tags);
                    messageDiv.innerText = 'Image analyzed successfully';
                    const firstTag = data.result.tags[0].tag.en;
                    getNutritionalInfo(firstTag);
                } else {
                    messageDiv.innerText = 'No tags found for this image';
                    resultDiv.innerText = '';
                }
            } catch (error) {
                messageDiv.innerText = `Error uploading image URL: ${error.message}. Please check the URL and API key, and try again.`;
            }
        }

        function displayTags(tags) {
            resultDiv.innerHTML = '<h4>Image Tags:</h4>';
            tags.forEach(tag => {
                resultDiv.innerHTML += `<p>${tag.tag.en} - Confidence: ${tag.confidence.toFixed(2)}%</p>`;
            });
        }

        async function getNutritionalInfo(foodName) {
            const apiKey = 'CMGTdzvyl8esGFVrodXzcPfIdvuaMHEbAbRTUHsk';
            const apiUrl = `https://api.nal.usda.gov/fdc/v1/foods/search?query=${encodeURIComponent(foodName)}&api_key=${apiKey}`;

            try {
                const response = await fetch(apiUrl);
                const data = await response.json();

                if (data.foods && data.foods.length > 0) {
                    for (const foodItem of data.foods) {
                        const sugarValue = foodItem.foodNutrients.find(n =>
                            n.nutrientName.includes('Total Sugars')
                        );

                        const glucoseValue = sugarValue;

                        if (sugarValue) {
                            await displayNutritionalInfo(foodItem, sugarValue, glucoseValue);
                            return;
                        }
                    }
                    sugarInfoDiv.innerText = 'No sugar or glucose information found for this food';
                } else {
                    sugarInfoDiv.innerText = 'No nutritional information found for this food';
                }
            } catch (error) {
                sugarInfoDiv.innerText = 'Error fetching nutritional info';
            }
        }

        async function displayNutritionalInfo(foodItem, sugarValue, glucoseValue) {
            sugarInfoDiv.innerHTML = `<h4>Nutritional Information:</h4>
                                      <p>${foodItem.description}</p>
                                      <p>Sugar: ${sugarValue ? sugarValue.value + 'g' : 'N/A'}</p>
                                      <p>Glucose: ${glucoseValue ? glucoseValue.value + 'g (Total Sugars)' : 'N/A'}</p>`;

            try {
                const response = await fetch('/api/add-meal', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        description: foodItem.description,
                        sugar: sugarValue ? sugarValue.value : 0,
                        glucose: glucoseValue ? glucoseValue.value : 0
                    })
                });

                if (response.ok) {
                    console.log('Data saved successfully');
                } else {
                    console.error('Error saving data to DB');
                }
            } catch (error) {
                console.error('Error sending data to server:', error);
            }
        }

        async function checkIfShabbatOrHolidayOnDate(year, month, day, hour, minute) {
            const url = `https://www.hebcal.com/shabbat?cfg=json&geo=geoname&latitude=32.0853&longitude=34.7818&m=50`;

            try {
                const response = await fetch(url);
                const data = await response.json();

                const selectedDate = new Date(year, month - 1, day, hour, minute);
                const dayOfWeek = selectedDate.getDay();

                const candleLightingEvent = data.items.find(item => item.category === "candles" && item.date.startsWith(selectedDate.toISOString().split('T')[0]));
                const havdalahEvent = data.items.find(item => item.category === "havdalah" && item.date.startsWith(selectedDate.toISOString().split('T')[0]));
                const holidayEvent = data.items.find(item => item.category === "holiday" && item.date.startsWith(selectedDate.toISOString().split('T')[0]));

                let message = '';
                
                if (holidayEvent) {
                    message = 'חג היום!';
                } else if (dayOfWeek === 5 && candleLightingEvent) {
                    const candleLightingTime = new Date(candleLightingEvent.date);
                    if (selectedDate < candleLightingTime) {
                        message = 'ערב שבת';
                    } else {
                        message = 'שבת היום!';
                    }
                } else if (dayOfWeek === 6) {
                    if (havdalahEvent) {
                        const havdalahTime = new Date(havdalahEvent.date);
                        if (selectedDate < havdalahTime) {
                            message = 'שבת היום!';
                        } else {
                            message = 'מוצאי שבת';
                        }
                    } else {
                        message = 'שבת היום!';
                    }
                } else {
                    message = 'היום זה לא שבת ולא חג';
                }

                const holidayMessageDiv = document.getElementById('holidayMessage');
                holidayMessageDiv.innerText = message;
                holidayMessageDiv.style.color = '#d4b862';
                holidayMessageDiv.style.fontWeight = 'bold';

            } catch (error) {
                console.error('Error fetching Shabbat or holiday data:', error);
            }
        }

        checkIfShabbatOrHolidayOnDate(2024, 11, 23, 19, 30);
    </script>
</body>
</html>
